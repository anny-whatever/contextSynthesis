generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String?         @unique
  name          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  conversations Conversation[]
  usageTracking UsageTracking[]

  @@map("users")
}

model Conversation {
  id                String                @id @default(cuid())
  title             String?
  userId            String?
  behavioralMemory  String?               // Stores 250-300 words of conversation-specific behavioral memory
  totalInputTokens  Int                   @default(0)
  totalOutputTokens Int                   @default(0)
  totalCost         Float                 @default(0.0)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  summaries         ConversationSummary[]
  user              User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  intentAnalyses    IntentAnalysis[]
  messages          Message[]
  usageTracking     UsageTracking[]

  @@map("conversations")
}

model Message {
  id             String               @id @default(cuid())
  conversationId String
  role           Role
  content        String
  inputTokens    Int?
  outputTokens   Int?
  cost           Float?
  metadata       Json?
  summaryId      String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  intentAnalyses IntentAnalysis[]
  conversation   Conversation         @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  summary        ConversationSummary? @relation(fields: [summaryId], references: [id])
  toolUsages     ToolUsage[]
  usageTracking  UsageTracking[]

  @@index([conversationId, summaryId])
  @@index([summaryId])
  @@map("messages")
}

model ToolUsage {
  id        String     @id @default(cuid())
  messageId String
  toolName  String
  input     Json
  output    Json?
  status    ToolStatus @default(PENDING)
  error     String?
  duration  Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  message   Message    @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("tool_usages")
}

model ConversationSummary {
  id               String                 @id @default(cuid())
  conversationId   String
  topicName        String
  summaryText      String
  relatedTopics    Json?
  messageRange     Json
  summaryLevel     Int                    @default(1)
  topicRelevance   Float                  @default(1.0)
  batchId          String?
  sourceContext    String?                @default("mixed") // 'user_prompt', 'ai_response', 'mixed'
  pointIndex       Int?                   // Index of the point in structured content
  parentTopic      String?                // Reference to parent topic for hierarchical relationships
  structuredContent Boolean               @default(false) // Whether this topic came from structured content
  broaderTopic     String?                // Conservative broader category (astronomy, anime, technology, etc.)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  topicEmbedding   Unsupported("vector")?
  conversation     Conversation           @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  messages         Message[]

  @@index([conversationId, batchId])
  @@index([topicName])
  @@index([structuredContent])
  @@index([parentTopic])
  @@index([broaderTopic])
  @@index([broaderTopic, createdAt])
  @@map("conversation_summaries")
}

model IntentAnalysis {
  id                    String       @id @default(cuid())
  conversationId        String
  userMessageId         String
  currentIntent         String
  contextualRelevance   String
  relationshipToHistory String
  keyTopics             Json
  pendingQuestions      Json
  lastAssistantQuestion String?
  analysisResult        Json
  createdAt             DateTime     @default(now())
  conversation          Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userMessage           Message      @relation(fields: [userMessageId], references: [id], onDelete: Cascade)

  @@map("intent_analyses")
}

model AgentSession {
  id           String   @id @default(cuid())
  sessionId    String   @unique
  agentName    String
  instructions String?
  context      Json?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("agent_sessions")
}

model UsageTracking {
  id               String             @id @default(cuid())
  conversationId   String?
  messageId        String?
  userId           String?
  operationType    UsageOperationType
  operationSubtype String?
  model            String
  inputTokens      Int                @default(0)
  outputTokens     Int                @default(0)
  totalTokens      Int                @default(0)
  inputCost        Float              @default(0.0)
  outputCost       Float              @default(0.0)
  totalCost        Float              @default(0.0)
  duration         Int?
  success          Boolean            @default(true)
  errorMessage     String?
  metadata         Json?
  batchId          String?
  createdAt        DateTime           @default(now())
  conversation     Conversation?      @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  message          Message?           @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user             User?              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([conversationId, operationType])
  @@index([userId, createdAt])
  @@index([operationType, createdAt])
  @@map("usage_tracking")
}

enum Role {
  USER
  ASSISTANT
  SYSTEM
  TOOL
}

enum ToolStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

enum UsageOperationType {
  AGENT_COMPLETION
  INTENT_ANALYSIS
  SUMMARIZATION
  TOPIC_EXTRACTION
  TOOL_CALL
  EMBEDDING_GENERATION
  BEHAVIORAL_MEMORY
}
