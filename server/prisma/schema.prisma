// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  conversations Conversation[]

  @@map("users")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String?
  userId    String?
  totalInputTokens  Int      @default(0)
  totalOutputTokens Int      @default(0)
  totalCost         Float    @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user               User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages           Message[]
  summaries          ConversationSummary[]
  intentAnalyses     IntentAnalysis[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           Role
  content        String
  inputTokens    Int?     // Tokens used for input (for ASSISTANT messages)
  outputTokens   Int?     // Tokens used for output (for ASSISTANT messages)
  cost           Float?   // Cost for this specific message
  metadata       Json?    // Store additional metadata like tool calls, citations, etc.
  summaryId      String?  // Reference to the summary this message belongs to
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  conversation    Conversation         @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  summary         ConversationSummary? @relation(fields: [summaryId], references: [id], onDelete: SetNull)
  toolUsages      ToolUsage[]
  intentAnalyses  IntentAnalysis[]

  @@index([conversationId, summaryId])
  @@index([summaryId])
  @@map("messages")
}

model ToolUsage {
  id        String   @id @default(cuid())
  messageId String
  toolName  String
  input     Json     // Store tool input parameters
  output    Json?    // Store tool output/results
  status    ToolStatus @default(PENDING)
  error     String?  // Store error message if tool execution failed
  duration  Int?     // Execution time in milliseconds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("tool_usages")
}

model ConversationSummary {
  id             String   @id @default(cuid())
  conversationId String
  summaryText    String   // Compressed conversation summary
  keyTopics      Json     // Array of key topics discussed
  messageRange   Json     // {startMessageId, endMessageId, messageCount}
  summaryLevel   Int      @default(1) // 1 = first summary, 2 = summary of summaries, etc.
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  messages     Message[]    // Messages that belong to this summary

  @@map("conversation_summaries")
}

model IntentAnalysis {
  id                    String   @id @default(cuid())
  conversationId        String
  userMessageId         String
  currentIntent         String   // What the user is trying to achieve
  contextualRelevance   String   // 'high', 'medium', 'low'
  relationshipToHistory String   // 'continuation', 'new_topic', 'clarification'
  keyTopics             Json     // Array of topics relevant to current intent
  pendingQuestions      Json     // Array of questions that need follow-up
  lastAssistantQuestion String?  // Last question asked by assistant
  analysisResult        Json     // Full analysis result for debugging
  createdAt             DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userMessage  Message      @relation(fields: [userMessageId], references: [id], onDelete: Cascade)

  @@map("intent_analyses")
}

model AgentSession {
  id          String   @id @default(cuid())
  sessionId   String   @unique
  agentName   String
  instructions String?
  context     Json?    // Store agent context and state
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("agent_sessions")
}

enum Role {
  USER
  ASSISTANT
  SYSTEM
  TOOL
}

enum ToolStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}